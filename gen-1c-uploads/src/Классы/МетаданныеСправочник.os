#Использовать json

Перем мИгнорировать;
Перем мОбъект;
Перем мИспользовованныеУИД;

Процедура Конструктор() Экспорт
	
	мИспользовованныеУИД = Новый Массив;
	
	мИгнорировать = Новый Массив;
	// мИгнорировать.Добавить("Реквизиты");
	// мИгнорировать.Добавить("Значения");
	// мИгнорировать.Добавить("ТабличныеЧасти");
	// мИгнорировать.Добавить("ТипМетаданных");
	// мИгнорировать.Добавить("ПризнакиУчета");
	// мИгнорировать.Добавить("ПризнакиУчетаСубконто");
	// мИгнорировать.Добавить("Адресация");
	
КонецПроцедуры

Процедура ОбеспечитьКаталог(Знач Каталог)
	
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Каталог " + Каталог + " не является каталогом";
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьРезультатВФайл(ИмяФайла, Данные)
	Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Текст.Записать(Данные);
	Текст.Закрыть();
КонецФункции // ЗаписатьРезультатВФайл(ИмяФайла,Данные)

Функция ПолучитьТекстИзФайла(ИмяФайла = "")
	ФайлОбмена = Новый Файл(ИмяФайла);
	Данные = "";
	Если ФайлОбмена.Существует() Тогда
		Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		Данные = Текст.Прочитать();
		Текст.Закрыть();
	Иначе
		ВызватьИсключение "Файл не найден: " + ИмяФайла;
	КонецЕсли;
	возврат Данные;
КонецФункции

Функция ПолучитьУИД()
	
	НовыйУИД = Новый УникальныйИдентификатор;
	
	Если мИспользовованныеУИД.Найти(НовыйУИД) = Неопределено Тогда
		Возврат НовыйУИД;
	Иначе
		Пока НЕ мИспользовованныеУИД.Найти(НовыйУИД) = Неопределено Цикл
			НовыйУИД = Новый УникальныйИдентификатор;
		КонецЦикла;
		Возврат НовыйУИД;
	КонецЕсли;
	
КонецФункции // ПолучитьУИД()

Функция ПолучитьОписаниеТипа(ТипСтр)
	
	Если СтрНайти(ТипСтр,".") > 0 Тогда
		ТипМ = СтрРазделить(ТипСтр, ".");
		Результат = "
		|<v8:Type>cfg:" + СвойстваМетаданных.КартаТипов[ТипМ[0]] + "." + ТипМ[1] + "</v8:Type>
		|";
	Иначе
		Если СвойстваМетаданных.КартаТипов.Свойство(ТипСтр) Тогда
			Результат = "
			|<v8:TypeSet>cfg:" + СвойстваМетаданных.КартаТипов[ТипСтр] + "</v8:TypeSet>
			|";
		Иначе
			Квалификатор = "";
			Если ТипСтр = "Булево" Тогда
				Результат = "<v8:Type>xs:boolean</v8:Type>
				|";
			ИначеЕсли СтрНачинаетсяС(ТипСтр, "Число") Тогда
				Результат = "<v8:Type>xs:decimal</v8:Type>
				|";
				ТипМ = СтрРазделить(ТипСтр, " ", Ложь);
				Если ТипМ.Количество() > 1 Тогда
					Квалификатор  = Квалификатор  + "
					|<v8:NumberQualifiers>
					|   <v8:Digits>" + ТипМ[1] + "</v8:Digits>
					|	<v8:FractionDigits>" + ТипМ[2] + "</v8:FractionDigits>
					|</v8:NumberQualifiers>
					|";
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ТипСтр, "Строка") Тогда
				Результат = "<v8:Type>xs:string</v8:Type>
				|";
				ТипМ = СтрРазделить(ТипСтр, " ", Ложь);
				Если ТипМ.Количество() > 1 Тогда
					Квалификатор  = Квалификатор  + "
					|<v8:StringQualifiers>
					|   <v8:Length>" + ТипМ[1] + "</v8:Length>
					|	<v8:AllowedLength>Variable</v8:AllowedLength>
					|</v8:StringQualifiers>
					|";
				КонецЕсли;
			ИначеЕсли ТипСтр = "Дата" Тогда
				Результат = "<v8:Type>xs:dateTime</v8:Type>
				|";
			ИначеЕсли ТипСтр = "ГУИД" Тогда
				Результат = "<v8:Type>v8:UUID</v8:Type>
				|";
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
	Возврат Результат + Квалификатор; 
	
КонецФункции

Функция РаспарситьШаблон(Параметры)
	
	ДанныеШаблона = "";
	Для каждого Стр Из Параметры Цикл
		
		Если НЕ мИгнорировать.Найти(Стр.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеКлюча = Стр.Значение;
		
		Если Стр.Ключ = "Синоним" Тогда
			ЗначениеКлюча = "
			|	<v8:item>
			|		<v8:lang>ru</v8:lang>
			|		<v8:content>" + Стр.Значение + "</v8:content>
			|	</v8:item>
			|";
		КонецЕсли;
		
		
		Если Стр.Ключ = "МинимальноеЗначение" Тогда
			ЗначениеКлюча = "
			|	<MinValue xsi:type=""xs:string"">" + Стр.Значение + "</MinValue>
			|";
			ДанныеШаблона  = ДанныеШаблона  + ЗначениеКлюча;
			Продолжить
			
		КонецЕсли;
		
		Если Стр.Ключ = "МаксимальноеЗначение" Тогда
			ЗначениеКлюча = "
			|	<MaxValue xsi:type=""xs:string"">" + Стр.Значение + "</MaxValue>
			|";
			ДанныеШаблона  = ДанныеШаблона  + ЗначениеКлюча;
			Продолжить
			
		КонецЕсли;
		
		Если Стр.Ключ = "ПроверкаЗаполнения" Тогда
			ЗначениеКлюча = ?(Стр.Значение=Истина,"ShowError","DontCheck");
		КонецЕсли;
		
		Если (Стр.Ключ = "Тип") Тогда
			ТипыРеквизита = СтрРазделить(ЗначениеКлюча,",", Ложь);
			
			ЗначениеКлюча = "";
			Если ТипыРеквизита.Количество() > 0 Тогда
				
				Для каждого ЭлементТип Из ТипыРеквизита Цикл
					
					СтрЭлементТип = СокрЛП(ЭлементТип);
					СтрЭлементТипы = СтрРазделить(СтрЭлементТип," ", Ложь);
					ЗначениеКлюча  = ЗначениеКлюча  + ПолучитьОписаниеТипа(СтрЭлементТип);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если 
			(Стр.Ключ = "Задача")
			ИЛИ (Стр.Ключ = "ПланВидовРасчета")
			Тогда
			ТипМ = СтрРазделить(ЗначениеКлюча, ".");
			ЗначениеКлюча = "" + СвойстваМетаданных.КартаТипов[ТипМ[0]] + "." + ТипМ[1];
		КонецЕсли;
		
		Если Стр.Ключ = "Состав" Тогда
			ЗначениеКлюча = ПолучитьСостав(мОбъект["Состав"], "Content");            
		КонецЕсли;
		
		ДанныеШаблона  = ДанныеШаблона  + "
		|		<%Ключ%>%Значение%</%Ключ%>
		|";
		
		ДанныеШаблона = СтрЗаменить(ДанныеШаблона,"%Ключ%", СвойстваМетаданных.Карта[Стр.Ключ]);
		ДанныеШаблона = СтрЗаменить(ДанныеШаблона,"%Значение%", ЗначениеКлюча);
	КонецЦикла;
	
	Возврат ДанныеШаблона;
	
КонецФункции // РаспарситьШаблон(ФайлШаблона, Параметры)

Функция ПолучитьШапку(Параметры)
	
	Возврат "<Properties>" + РаспарситьШаблон(Параметры) + "</Properties>";
	
КонецФункции // ИмяФункции()

Функция ПолучитьРеквизиты(Параметры, ИмяТега = "Attribute")
	
	Реквизиты = "";
	Для каждого Реквизит Из Параметры Цикл
		
		Реквизиты  = Реквизиты  + "
		|<" + ИмяТега + " uuid=""" + ПолучитьУИД() + """>
		|	<Properties>";
		
		Реквизиты = Реквизиты + РаспарситьШаблон(Реквизит);
		
		Реквизиты  = Реквизиты  + "
		|	</Properties>
		|</" + ИмяТега + ">";
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции // ПолучитьРеквизиты()

// Для ОбщихРеквизитов
Функция ПолучитьСостав(Параметры, Тег)
	Реквизиты  = "";
	
	Для каждого Реквизит Из Параметры Цикл
		
		ТипМ = СтрРазделить(Реквизит, ".");
		ТипМД = СвойстваМетаданных.КартаДляСостава[ТипМ[0]] + "." + ТипМ[1];
		
		Реквизиты  = Реквизиты  + "
		|				<xr:Item>
		|					<xr:Metadata>" + ТипМД + "</xr:Metadata>
		|					<xr:Use>Use</xr:Use>
		|					<xr:ConditionalSeparation/>
		|				</xr:Item>
		|";
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции // ПолучитьРеквизиты()

Функция ГенерируемыйТип(Имя, ТипПолный, ТипКраткий, ЮИД1 = Неопределено, ЮИД2 = Неопределено)
	
	ЮИД1 = ?(ЮИД1 = Неопределено, ПолучитьУИД(), ЮИД1);
	ЮИД2 = ?(ЮИД2 = Неопределено, ПолучитьУИД(), ЮИД2);
	
	Стр = "
	|			<xr:GeneratedType name=""" + ТипПолный + "." + Имя + """ category=""" + ТипКраткий + """>
	|				<xr:TypeId>" + ЮИД1 + "</xr:TypeId>
	|				<xr:ValueId>" + ЮИД2 + "</xr:ValueId>
	|			</xr:GeneratedType>
	|";
	Возврат Стр;
	
КонецФункции

Функция ПолучитьЗаголовки(Параметры)
	
	Результат = Новый Структура;
	СтрНачало = "<?xml version=""1.0"" encoding=""UTF-8""?>
	|<MetaDataObject xmlns=""http://v8.1c.ru/8.3/MDClasses"" 
	| xmlns:app=""http://v8.1c.ru/8.2/managed-application/core"" 
	| xmlns:cfg=""http://v8.1c.ru/8.1/data/enterprise/current-config""
	| xmlns:cmi=""http://v8.1c.ru/8.2/managed-application/cmi"" 
	| xmlns:ent=""http://v8.1c.ru/8.1/data/enterprise"" 
	| xmlns:lf=""http://v8.1c.ru/8.2/managed-application/logform"" 
	| xmlns:style=""http://v8.1c.ru/8.1/data/ui/style"" 
	| xmlns:sys=""http://v8.1c.ru/8.1/data/ui/fonts/system"" 
	| xmlns:v8=""http://v8.1c.ru/8.1/data/core"" 
	| xmlns:v8ui=""http://v8.1c.ru/8.1/data/ui"" 
	| xmlns:web=""http://v8.1c.ru/8.1/data/ui/colors/web"" 
	| xmlns:win=""http://v8.1c.ru/8.1/data/ui/colors/windows"" 
	| xmlns:xen=""http://v8.1c.ru/8.3/xcf/enums"" 
	| xmlns:xpr=""http://v8.1c.ru/8.3/xcf/predef"" 
	| xmlns:xr=""http://v8.1c.ru/8.3/xcf/readable"" 
	| xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
	| xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" version=""2.1"">
	|";
	СтрКонец = "";
	
	СтрНачало  = СтрНачало  + "
	|<Catalog uuid=""" + ПолучитьУИД() + """>
	|		<InternalInfo>
	|" + ГенерируемыйТип(Параметры["Имя"], "CatalogObject", "Object")  + "
	|" + ГенерируемыйТип(Параметры["Имя"], "CatalogRef", "Ref")  + "
	|" + ГенерируемыйТип(Параметры["Имя"], "CatalogSelection", "Selection")  + "
	|" + ГенерируемыйТип(Параметры["Имя"], "CatalogList", "List")  + "
	|" + ГенерируемыйТип(Параметры["Имя"], "CatalogManager", "Manager")  + "
	|		</InternalInfo>
	|";
	
	СтрКонец = "
	|</Catalog>";
	СтрКонец  = СтрКонец  + "
	|</MetaDataObject>";
	
	Результат.Вставить("Начало", СтрНачало);
	Результат.Вставить("Конец", СтрКонец);
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗаголовки()

Функция ПолучитьТабличныеЧасти(Параметры, ИмяОбъектаМД="")
	
	Реквизиты = "";
	Для каждого ТабЧасть Из Параметры Цикл
		
		ПолноеИмяТЧ = СокрЛП(ИмяОбъектаМД) + "." + СокрЛП(ТабЧасть["Имя"]);
		
		Реквизиты  = Реквизиты  + "
		|<TabularSection uuid=""" + (Новый УникальныйИдентификатор) + """>
		|				<InternalInfo>
		|					<xr:GeneratedType name=""ReportTabularSection." + ПолноеИмяТЧ + """ category=""TabularSection"">
		|						<xr:TypeId>" + (Новый УникальныйИдентификатор) + "</xr:TypeId>
		|						<xr:ValueId>" + (Новый УникальныйИдентификатор) + "</xr:ValueId>
		|					</xr:GeneratedType>
		|					<xr:GeneratedType name=""ReportTabularSectionRow." + ПолноеИмяТЧ + """ category=""TabularSectionRow"">
		|						<xr:TypeId>" + (Новый УникальныйИдентификатор) + "</xr:TypeId>
		|						<xr:ValueId>" + (Новый УникальныйИдентификатор) + "</xr:ValueId>
		|					</xr:GeneratedType>
		|				</InternalInfo>
		|	<Properties>
		|	
		|";
		
		Реквизиты = Реквизиты + РаспарситьШаблон(ТабЧасть);
		
		Реквизиты  = Реквизиты  + "
		|</Properties>
		|		<ChildObjects>
		|";
		
		Для каждого РеквизитТЧ Из ТабЧасть["Реквизиты"] Цикл
			Реквизиты  = Реквизиты  + "
			|<Attribute uuid=""" + (Новый УникальныйИдентификатор) + """>
			|<Properties>
			|";
			
			Реквизиты = Реквизиты + РаспарситьШаблон(РеквизитТЧ);
			
			Реквизиты  = Реквизиты  + "
			|</Properties>
			|</Attribute>
			|";
			
		КонецЦикла;
		
		Реквизиты  = Реквизиты  + "
		|		</ChildObjects>
		|</TabularSection>";
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции // ПолучитьТабличныеЧасти(Параметры)

Процедура СоздатьФайлыПоПравилам(Объект, ИмяРезультирующегоФайла="") Экспорт
	
	
	мОбъект = Объект; 
	
	ТабЧасти = "";
	Реквизиты = "";
	
	НачалоПодчиненных = "<ChildObjects>";
	КонецПодчиненных = "</ChildObjects>";
	
	Заголовки = ПолучитьЗаголовки(Объект);
	Шапка = ПолучитьШапку(Объект);
	
	Если Объект.Получить("Реквизиты") <> Неопределено Тогда
		Реквизиты = ПолучитьРеквизиты(Объект["Реквизиты"]);
	КонецЕсли;
	
	Если Объект.Получить("ТабличныеЧасти") <> Неопределено Тогда
		ТабЧасти = ПолучитьТабличныеЧасти(Объект["ТабличныеЧасти"], Объект["Имя"]);
	КонецЕсли;
	
	Результат = Заголовки.Начало 
	+ Шапка 
	+ НачалоПодчиненных 
	+ Реквизиты  
	+ ТабЧасти 
	+ КонецПодчиненных 
	+ Заголовки.Конец;
	
	ИмяФайла = ?(ИмяРезультирующегоФайла="", Объект["Имя"], ИмяРезультирующегоФайла);
	
	// ОбеспечитьКаталог(ИмяФайла);
	
	ЗаписатьРезультатВФайл(ИмяФайла, Результат);
	
КонецПроцедуры

